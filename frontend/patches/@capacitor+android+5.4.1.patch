diff --git a/node_modules/@capacitor/android/capacitor/src/main/assets/native-bridge.js b/node_modules/@capacitor/android/capacitor/src/main/assets/native-bridge.js
index 9eb1309..3f6d3f7 100644
--- a/node_modules/@capacitor/android/capacitor/src/main/assets/native-bridge.js
+++ b/node_modules/@capacitor/android/capacitor/src/main/assets/native-bridge.js
@@ -64,6 +64,39 @@ var nativeBridge = (function (exports) {
         }
         return newFormData;
     };
+    const b64toBlob = (b64Data, contentType='', sliceSize= 512) => {
+      const byteCharacters = atob(b64Data);
+      const byteArrays = [];
+
+      for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
+        const slice = byteCharacters.slice(offset, offset + sliceSize);
+
+        const byteNumbers = new Array(slice.length);
+        for (let i = 0; i < slice.length; i++) {
+          byteNumbers[i] = slice.charCodeAt(i);
+        }
+
+        const byteArray = new Uint8Array(byteNumbers);
+        byteArrays.push(byteArray);
+      }
+
+      const blob = new Blob(byteArrays, {type: contentType});
+      return blob;
+    };
+    const lowercaseKeys = (obj) => {
+      if (!obj) {
+        return {};
+      }
+      return Object.keys(obj).reduce((accumulator, key) => {
+        accumulator[key.toLowerCase()] = obj[key];
+        return accumulator;
+      }, {});
+    };
+    const mergeHeaders = (headers1, headers2) => {
+      const headers1lower = lowercaseKeys(headers1);
+      const headers2lower = lowercaseKeys(headers2);
+      return Object.assign(Object.assign({}, headers1lower), headers2lower);
+    };
     const convertBody = async (body, contentType) => {
         if (body instanceof ReadableStream) {
             const reader = body.getReader();
@@ -82,7 +115,7 @@ var nativeBridge = (function (exports) {
             }
             let data = new TextDecoder().decode(concatenated);
             let type;
-            if (contentType === 'application/json') {
+            if (contentType === 'application/json' || contentType === 'application/vnd.api+json') { // PATCH: IAM responses fix
                 try {
                     data = JSON.parse(data);
                 }
@@ -120,7 +153,7 @@ var nativeBridge = (function (exports) {
                 },
             };
         }
-        else if (body instanceof File) {
+        else if (body instanceof File || body instanceof Blob) { // PATCH: file upload fix
             const fileData = await readFileAsBase64(body);
             return {
                 data: fileData,
@@ -128,6 +161,12 @@ var nativeBridge = (function (exports) {
                 headers: { 'Content-Type': body.type },
             };
         }
+        else if (body instanceof URLSearchParams) { // PATCH: oidc-client-ts token call fix
+            return {
+                data: body.toString(),
+                type: 'string',
+           };
+        }
         return { data: body, type: 'json' };
     };
     const initBridge = (w) => {
@@ -469,8 +508,8 @@ var nativeBridge = (function (exports) {
                     // fetch patch
                     window.fetch = async (resource, options) => {
                         const request = new Request(resource, options);
-                        if (!(request.url.startsWith('http:') ||
-                            request.url.startsWith('https:'))) {
+                        const url = resource instanceof Request ? resource.url : resource; // PATCH: @capacitor/android http: / https: detection after update fix
+                        if (!(url.startsWith('http:') || url.startsWith('https:'))) {
                             return win.CapacitorWebFetch(resource, options);
                         }
                         const tag = `CapacitorHttp fetch ${Date.now()} ${resource}`;
@@ -485,11 +524,11 @@ var nativeBridge = (function (exports) {
                                 method: method,
                                 data: requestData,
                                 dataType: type,
-                                headers: Object.assign(Object.assign({}, headers), optionHeaders),
+                                headers: mergeHeaders(headers, optionHeaders), // PATCH: IAM request fix
                             });
                             const contentType = nativeResponse.headers['Content-Type'] ||
                                 nativeResponse.headers['content-type'];
-                            let data = (contentType === null || contentType === void 0 ? void 0 : contentType.startsWith('application/json'))
+                            let data = (contentType === null || contentType === void 0 ? void 0 : (contentType.startsWith('application/json') || contentType.startsWith('application/vnd.api+json'))) // PATCH: IAM responses fix
                                 ? JSON.stringify(nativeResponse.data)
                                 : nativeResponse.data;
                             // use null data for 204 No Content HTTP response
@@ -613,8 +652,8 @@ var nativeBridge = (function (exports) {
                                         url: this._url,
                                         method: this._method,
                                         data: data !== null ? data : undefined,
-                                        headers: Object.assign(Object.assign({}, headers), otherHeaders),
-                                        dataType: type,
+                                        headers: mergeHeaders(headers, otherHeaders), // PATCH: IAM request fix
+                                        dataType: type
                                     })
                                         .then((nativeResponse) => {
                                         var _a;
@@ -638,9 +677,7 @@ var nativeBridge = (function (exports) {
                                                 this.response = responseString;
                                             }
                                             else if (this.responseType === 'blob') {
-                                                this.response = new Blob([responseString], {
-                                                    type: 'application/json',
-                                                });
+                                              this.response = b64toBlob(responseString, this._headers['Content-Type'] || 'application/json'); // PATCH: file download fix
                                             }
                                             else if (this.responseType === 'arraybuffer') {
                                                 const encoder = new TextEncoder();
@@ -650,7 +687,7 @@ var nativeBridge = (function (exports) {
                                             else {
                                                 this.response = nativeResponse.data;
                                             }
-                                            this.responseText = ((_a = nativeResponse.headers['Content-Type']) === null || _a === void 0 ? void 0 : _a.startsWith('application/json'))
+                                            this.responseText = ((_a = nativeResponse.headers['Content-Type']) === null || _a === void 0 ? void 0 : (_a.startsWith('application/json') || _a.startsWith('application/vnd.api+json'))) // PATCH: IAM responses fix
                                                 ? JSON.stringify(nativeResponse.data)
                                                 : nativeResponse.data;
                                             this.responseURL = nativeResponse.url;
diff --git a/node_modules/@capacitor/android/capacitor/src/main/java/com/getcapacitor/Bridge.java b/node_modules/@capacitor/android/capacitor/src/main/java/com/getcapacitor/Bridge.java
index 0e732a9..52cb8a5 100644
--- a/node_modules/@capacitor/android/capacitor/src/main/java/com/getcapacitor/Bridge.java
+++ b/node_modules/@capacitor/android/capacitor/src/main/java/com/getcapacitor/Bridge.java
@@ -246,7 +246,7 @@ public class Bridge {
         final boolean html5mode = this.config.isHTML5Mode();

         // Start the local web server
-        localServer = new WebViewLocalServer(context, this, getJSInjector(), authorities, html5mode);
+        localServer = new WebViewLocalServer(context, this, authorities, html5mode);
         localServer.hostAssets(DEFAULT_WEB_ASSET_DIR);

         Logger.debug("Loading app at " + appUrl);
@@ -514,6 +514,11 @@ public class Bridge {

     public void reset() {
         savedCalls = new HashMap<>();
+
+        JSInjector jsInjector = getJSInjector(); // PATCH: redirect + injection fix - https://github.com/ionic-team/capacitor/pull/5872
+        if (jsInjector != null) {
+            webView.evaluateJavascript(jsInjector.getScriptString(), result -> {});
+        }
     }

     /**
diff --git a/node_modules/@capacitor/android/capacitor/src/main/java/com/getcapacitor/WebViewLocalServer.java b/node_modules/@capacitor/android/capacitor/src/main/java/com/getcapacitor/WebViewLocalServer.java
index 6ef1235..3f210f1 100755
--- a/node_modules/@capacitor/android/capacitor/src/main/java/com/getcapacitor/WebViewLocalServer.java
+++ b/node_modules/@capacitor/android/capacitor/src/main/java/com/getcapacitor/WebViewLocalServer.java
@@ -56,7 +56,6 @@ public class WebViewLocalServer {
     private boolean isAsset;
     // Whether to route all requests to paths without extensions back to `index.html`
     private final boolean html5mode;
-    private final JSInjector jsInjector;
     private final Bridge bridge;

     /**
@@ -128,30 +127,12 @@ public class WebViewLocalServer {
         }
     }

-    WebViewLocalServer(Context context, Bridge bridge, JSInjector jsInjector, ArrayList<String> authorities, boolean html5mode) {
+    WebViewLocalServer(Context context, Bridge bridge, ArrayList<String> authorities, boolean html5mode) {
         uriMatcher = new UriMatcher(null);
         this.html5mode = html5mode;
         this.protocolHandler = new AndroidProtocolHandler(context.getApplicationContext());
         this.authorities = authorities;
         this.bridge = bridge;
-        this.jsInjector = jsInjector;
-    }
-
-    private static Uri parseAndVerifyUrl(String url) {
-        if (url == null) {
-            return null;
-        }
-        Uri uri = Uri.parse(url);
-        if (uri == null) {
-            Logger.error("Malformed URL: " + url);
-            return null;
-        }
-        String path = uri.getPath();
-        if (path == null || path.isEmpty()) {
-            Logger.error("URL does not have a path: " + url);
-            return null;
-        }
-        return uri;
     }

     /**
@@ -177,7 +158,7 @@ public class WebViewLocalServer {
             Logger.debug("Handling local request: " + request.getUrl().toString());
             return handleLocalRequest(request, handler);
         } else {
-            return handleProxyRequest(request, handler);
+            return null; // PATCH: redirect + injection fix - https://github.com/ionic-team/capacitor/pull/5872
         }
     }

@@ -277,8 +258,6 @@ public class WebViewLocalServer {
                 return null;
             }

-            responseStream = jsInjector.getInjectedStream(responseStream);
-
             int statusCode = getStatusCode(responseStream, handler.getStatusCode());
             return new WebResourceResponse(
                 "text/html",
@@ -300,15 +279,8 @@ public class WebViewLocalServer {

         int periodIndex = path.lastIndexOf(".");
         if (periodIndex >= 0) {
-            String ext = path.substring(path.lastIndexOf("."));
-
             InputStream responseStream = new LollipopLazyInputStream(handler, request);

-            // TODO: Conjure up a bit more subtlety than this
-            if (ext.equals(".html")) {
-                responseStream = jsInjector.getInjectedStream(responseStream);
-            }
-
             String mimeType = getMimeType(path, responseStream);
             int statusCode = getStatusCode(responseStream, handler.getStatusCode());
             return new WebResourceResponse(
@@ -324,68 +296,6 @@ public class WebViewLocalServer {
         return null;
     }

-    /**
-     * Instead of reading files from the filesystem/assets, proxy through to the URL
-     * and let an external server handle it.
-     * @param request
-     * @param handler
-     * @return
-     */
-    private WebResourceResponse handleProxyRequest(WebResourceRequest request, PathHandler handler) {
-        final String method = request.getMethod();
-        if (method.equals("GET")) {
-            try {
-                String url = request.getUrl().toString();
-                Map<String, String> headers = request.getRequestHeaders();
-                boolean isHtmlText = false;
-                for (Map.Entry<String, String> header : headers.entrySet()) {
-                    if (header.getKey().equalsIgnoreCase("Accept") && header.getValue().toLowerCase().contains("text/html")) {
-                        isHtmlText = true;
-                        break;
-                    }
-                }
-                if (isHtmlText) {
-                    HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
-                    for (Map.Entry<String, String> header : headers.entrySet()) {
-                        conn.setRequestProperty(header.getKey(), header.getValue());
-                    }
-                    String getCookie = CookieManager.getInstance().getCookie(url);
-                    if (getCookie != null) {
-                        conn.setRequestProperty("Cookie", getCookie);
-                    }
-                    conn.setRequestMethod(method);
-                    conn.setReadTimeout(30 * 1000);
-                    conn.setConnectTimeout(30 * 1000);
-                    if (request.getUrl().getUserInfo() != null) {
-                        byte[] userInfoBytes = request.getUrl().getUserInfo().getBytes(StandardCharsets.UTF_8);
-                        String base64 = Base64.encodeToString(userInfoBytes, Base64.NO_WRAP);
-                        conn.setRequestProperty("Authorization", "Basic " + base64);
-                    }
-
-                    List<String> cookies = conn.getHeaderFields().get("Set-Cookie");
-                    if (cookies != null) {
-                        for (String cookie : cookies) {
-                            CookieManager.getInstance().setCookie(url, cookie);
-                        }
-                    }
-                    InputStream responseStream = conn.getInputStream();
-                    responseStream = jsInjector.getInjectedStream(responseStream);
-                    return new WebResourceResponse(
-                        "text/html",
-                        handler.getEncoding(),
-                        handler.getStatusCode(),
-                        handler.getReasonPhrase(),
-                        handler.getResponseHeaders(),
-                        responseStream
-                    );
-                }
-            } catch (Exception ex) {
-                bridge.handleAppUrlLoadError(ex);
-            }
-        }
-        return null;
-    }
-
     private String getMimeType(String path, InputStream stream) {
         String mimeType = null;
         try {
diff --git a/node_modules/@capacitor/android/capacitor/src/main/java/com/getcapacitor/plugin/util/HttpRequestHandler.java b/node_modules/@capacitor/android/capacitor/src/main/java/com/getcapacitor/plugin/util/HttpRequestHandler.java
index 9d8e0a4..49a36e0 100644
--- a/node_modules/@capacitor/android/capacitor/src/main/java/com/getcapacitor/plugin/util/HttpRequestHandler.java
+++ b/node_modules/@capacitor/android/capacitor/src/main/java/com/getcapacitor/plugin/util/HttpRequestHandler.java
@@ -238,9 +238,12 @@ public class HttpRequestHandler {
             } else {
                 return readStreamAsString(errorStream);
             }
-        } else if (contentType != null && contentType.contains(MimeType.APPLICATION_JSON.getValue())) {
+        } else if (isOneOf(contentType, MimeType.APPLICATION_JSON, MimeType.APPLICATION_VND_API_JSON)) { // PATCH: IAM responses fix
             // backward compatibility
             return parseJSON(readStreamAsString(connection.getInputStream()));
+        } else if (contentType != null && contentType.contains("application/pdf")) { // PATCH: file download fix
+            InputStream stream = connection.getInputStream();
+            return readStreamAsBase64(stream);
         } else {
             InputStream stream = connection.getInputStream();
             switch (responseType) {
